// This file is auto-generated by vscode-router-generator
// Do not edit this file directly

// Page Routes
// "/test": root-module > test-module
// "/settings/admin": root-module > settings-module > admin-settings
// "/settings/": root-module > settings-module > settings-default
// "/settings": root-module > settings-module
// "/dashboard/overview": root-module > dashboard-module > overview-module
// "/dashboard/account/:userid": root-module > dashboard-module > account-module > account-details
// "/dashboard/account/": root-module > dashboard-module > account-module > account-info
// "/dashboard/account": root-module > dashboard-module > account-module
// "/dashboard/": root-module > dashboard-module > dashboard-default
// "/dashboard": root-module > dashboard-module
// "/custom": root-module > custom-route
// "/404": root-module > unknown-route
// "/": root-module > app-module
// "": root-module

import { html, TemplateResult } from "lit";

interface LitOptions {
  route: string,
  args: { [key: string]: string },
  data: any
}

interface PageRoute {
  render: (options: LitOptions) => TemplateResult,
  lazyImport: () => Promise<any>,
  hasIndex: boolean
  dataLoader: (alias:any, route:string, args: { [key: string]: string }) => Promise<any>
}

export const routes = new Map<string, PageRoute>([
  ['/test', {
        render: () => html`<root-module><test-module ></test-module></root-module>`,
        lazyImport: async () => {
            await import('./pages/root');
            return import('./pages/test.multiple.:args.ts');
        },
        dataLoader: () => Promise.resolve(null),
        hasIndex: false
    }],
  ['/settings/admin', {
        render: () => html`<root-module><settings-module><admin-settings ></admin-settings></settings-module></root-module>`,
        lazyImport: async () => {
            await import('./pages/root');
            await import('./pages/settings');
            return import('./pages/settings/admin');
        },
        dataLoader: () => Promise.resolve(null),
        hasIndex: false
    }],
  ['/settings/', {
        render: () => html`<root-module><settings-module><settings-default ></settings-default></settings-module></root-module>`,
        lazyImport: async () => {
            await import('./pages/root');
            await import('./pages/settings');
            return import('./pages/settings/index');
        },
        dataLoader: () => Promise.resolve(null),
        hasIndex: false
    }],
  ['/settings', {
        render: () => html`<root-module><settings-module ></settings-module></root-module>`,
        lazyImport: async () => {
            await import('./pages/root');
            return import('./pages/settings');
        },
        dataLoader: () => Promise.resolve(null),
        hasIndex: true
    }],
  ['/dashboard/overview', {
        render: () => html`<root-module><dashboard-module><overview-module ></overview-module></dashboard-module></root-module>`,
        lazyImport: async () => {
            await import('./pages/root');
            await import('./pages/dashboard');
            return import('./pages/dashboard/overview');
        },
        dataLoader: () => Promise.resolve(null),
        hasIndex: false
    }],
  ['/dashboard/account/:userid', {
        render: ({ args, data }) => html`<root-module><dashboard-module><account-module><account-details userid=${args['userid']}  .data=${data} ></account-details></account-module></dashboard-module></root-module>`,
        lazyImport: async () => {
            await import('./pages/root');
            await import('./pages/dashboard');
            await import('./pages/dashboard/account');
            return import('./pages/dashboard/account/:userId');
        },
        dataLoader: (alias, route, args) => alias.loader(route, args),
        hasIndex: false
    }],
  ['/dashboard/account/', {
        render: ({ data }) => html`<root-module><dashboard-module><account-module><account-info  .data=${data} ></account-info></account-module></dashboard-module></root-module>`,
        lazyImport: async () => {
            await import('./pages/root');
            await import('./pages/dashboard');
            await import('./pages/dashboard/account');
            return import('./pages/dashboard/account/index');
        },
        dataLoader: (alias, route, args) => alias.loader(route, args),
        hasIndex: false
    }],
  ['/dashboard/account', {
        render: () => html`<root-module><dashboard-module><account-module ></account-module></dashboard-module></root-module>`,
        lazyImport: async () => {
            await import('./pages/root');
            await import('./pages/dashboard');
            return import('./pages/dashboard/account');
        },
        dataLoader: () => Promise.resolve(null),
        hasIndex: true
    }],
  ['/dashboard/', {
        render: () => html`<root-module><dashboard-module><dashboard-default ></dashboard-default></dashboard-module></root-module>`,
        lazyImport: async () => {
            await import('./pages/root');
            await import('./pages/dashboard');
            return import('./pages/dashboard/index');
        },
        dataLoader: () => Promise.resolve(null),
        hasIndex: false
    }],
  ['/dashboard', {
        render: () => html`<root-module><dashboard-module ></dashboard-module></root-module>`,
        lazyImport: async () => {
            await import('./pages/root');
            return import('./pages/dashboard');
        },
        dataLoader: () => Promise.resolve(null),
        hasIndex: true
    }],
  ['/custom', {
        render: () => html`<root-module><custom-route ></custom-route></root-module>`,
        lazyImport: async () => {
            await import('./pages/root');
            return import('./pages/custom.nested.route.ts');
        },
        dataLoader: () => Promise.resolve(null),
        hasIndex: false
    }],
  ['/404', {
        render: () => html`<root-module><unknown-route ></unknown-route></root-module>`,
        lazyImport: async () => {
            await import('./pages/root');
            return import('./pages/404');
        },
        dataLoader: () => Promise.resolve(null),
        hasIndex: false
    }],
  ['/', {
        render: () => html`<root-module><app-module ></app-module></root-module>`,
        lazyImport: async () => {
            await import('./pages/root');
            return import('./pages/index');
        },
        dataLoader: () => Promise.resolve(null),
        hasIndex: false
    }],
  ['', {
        render: () => html`<root-module ></root-module>`,
        lazyImport: async () => {
            return import('./pages/root');
        },
        dataLoader: () => Promise.resolve(null),
        hasIndex: false
    }],
]);

export async function renderRoute(route: string) : Promise<TemplateResult | null> {
    const match = getRoute(route);
    if (match) {
        const args = getArgsForRoute(route);
        const attrs: { [key: string]: string } = {};
        if (args?.groups) {
            for (const [key, value] of Object.entries(args.groups)) {
                if (key && value) attrs[key] = value;
            }
        }
        const alias = await match.lazyImport();
        const data = await match.dataLoader(alias, route, attrs);
        return match.render({ route, args: attrs, data });
    }
    return null;
}

function getRoute(route: string) {
    const match = routes.get(route);
    if (match) {
        if (match.hasIndex) {
            const indexMatch = routes.get(`${route}/`);
            if (indexMatch) {
                return indexMatch;
            }
        }
        return match;
    }
    for (const [key, value] of routes.entries()) {
        const regMatch = route.match(fixRegex(key));
        if (regMatch !== null) return value;
    }
    return routes.get('/404')
}

function fixRegex(route: string): RegExp {
    const variableRegex = "[a-zA-Z0-9_-]+";
    const nameWithParameters = route.replace(
        new RegExp(`:(${variableRegex})`),
        (match) => {
            const groupName = match.slice(1);
            return `(?<${groupName}>[a-zA-Z0-9_\\-.,:;+*^%$@!]+)`;
        }
    );
    return new RegExp(`^${nameWithParameters}$`);
}

function getArgsForRoute(route: string): RegExpMatchArray | null {
     for(const key of Array.from(routes.keys())) {
        const regMatch = route.match(fixRegex(key));
        if (regMatch !== null) return regMatch;
    }
    return null;
}
