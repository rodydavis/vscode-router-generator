// This file is auto-generated by vscode-router-generator
// Do not edit this file directly

// Page Routes
// "/test/:page/multiple/:args": root-module > test-module
// "/settings/admin": root-module > settings-module > admin-settings
// "/settings/": root-module > settings-module > settings-default
// "/settings": root-module > settings-module
// "/dashboard/overview": root-module > dashboard-module > overview-module
// "/dashboard/account/:user_id": root-module > dashboard-module > account-module > account-details
// "/dashboard/account/": root-module > dashboard-module > account-module > account-info
// "/dashboard/account": root-module > dashboard-module > account-module
// "/dashboard/": root-module > dashboard-module > dashboard-default
// "/dashboard": root-module > dashboard-module
// "/custom/not/nested/route": root-module > custom-route
// "/404": root-module > unknown-route
// "/": root-module > app-module
// "": root-module

import { html, TemplateResult } from "lit";

import * as route13 from "./pages/test.:page.multiple.:args";
import * as route10 from "./pages/settings/admin";
import * as route11 from "./pages/settings/index";
import * as route12 from "./pages/settings";
import * as route6 from "./pages/dashboard/overview";
import * as route2 from "./pages/dashboard/account/:user_id";
import * as route3 from "./pages/dashboard/account/index";
import * as route4 from "./pages/dashboard/account";
import * as route5 from "./pages/dashboard/index";
import * as route7 from "./pages/dashboard";
import * as route1 from "./pages/custom.not.nested.route";
import * as route0 from "./pages/404";
import * as route8 from "./pages/index";
import * as route9 from "./pages/root";

interface LitOptions {
  route: string;
  args: { [key: string]: string };
  data: any;
}

interface PageRoute {
  render: (options: LitOptions) => TemplateResult;
  lazyImport: () => Promise<any>;
  hasIndex: boolean;
  name: string;
  parentRoute?: string;
  dataLoader: (
    alias: any,
    route: string,
    args: { [key: string]: string }
  ) => Promise<any>;
}

export const routes = new Map<string, PageRoute>([
  [
    "/test/:page/multiple/:args",
    {
      render: ({ args }) =>
        html`<root-module
          ><test-module page=${args["page"]} args=${args["args"]}></test-module
        ></root-module>`,
      lazyImport: async () => route13,
      dataLoader: () => Promise.resolve(null),
      hasIndex: false,
      name: "route13",
    },
  ],
  [
    "/settings/admin",
    {
      render: () =>
        html`<root-module
          ><settings-module><admin-settings></admin-settings></settings-module
        ></root-module>`,
      lazyImport: async () => route10,
      dataLoader: () => Promise.resolve(null),
      hasIndex: false,
      name: "route10",
      parentRoute: "/settings",
    },
  ],
  [
    "/settings/",
    {
      render: () =>
        html`<root-module
          ><settings-module
            ><settings-default></settings-default></settings-module
        ></root-module>`,
      lazyImport: async () => route11,
      dataLoader: () => Promise.resolve(null),
      hasIndex: false,
      name: "route11",
      parentRoute: "/settings",
    },
  ],
  [
    "/settings",
    {
      render: () =>
        html`<root-module><settings-module></settings-module></root-module>`,
      lazyImport: async () => route12,
      dataLoader: () => Promise.resolve(null),
      hasIndex: true,
      name: "route12",
      parentRoute: "",
    },
  ],
  [
    "/dashboard/overview",
    {
      render: () =>
        html`<root-module
          ><dashboard-module
            ><overview-module></overview-module></dashboard-module
        ></root-module>`,
      lazyImport: async () => route6,
      dataLoader: () => Promise.resolve(null),
      hasIndex: false,
      name: "route6",
      parentRoute: "/dashboard",
    },
  ],
  [
    "/dashboard/account/:user_id",
    {
      render: ({ args, data }) =>
        html`<root-module
          ><dashboard-module
            ><account-module
              ><account-details
                user_id=${args["user_id"]}
                .data=${data["route2"]}
              ></account-details></account-module></dashboard-module
        ></root-module>`,
      lazyImport: async () => route2,
      dataLoader: (alias, route, args) => alias.loader(route, args),
      hasIndex: false,
      name: "route2",
      parentRoute: "/dashboard/account",
    },
  ],
  [
    "/dashboard/account/",
    {
      render: ({ data }) =>
        html`<root-module
          ><dashboard-module
            ><account-module
              ><account-info
                .data=${data["route3"]}
              ></account-info></account-module></dashboard-module
        ></root-module>`,
      lazyImport: async () => route3,
      dataLoader: (alias, route, args) => alias.loader(route, args),
      hasIndex: false,
      name: "route3",
      parentRoute: "/dashboard/account",
    },
  ],
  [
    "/dashboard/account",
    {
      render: () =>
        html`<root-module
          ><dashboard-module><account-module></account-module></dashboard-module
        ></root-module>`,
      lazyImport: async () => route4,
      dataLoader: () => Promise.resolve(null),
      hasIndex: true,
      name: "route4",
      parentRoute: "/dashboard",
    },
  ],
  [
    "/dashboard/",
    {
      render: () =>
        html`<root-module
          ><dashboard-module
            ><dashboard-default></dashboard-default></dashboard-module
        ></root-module>`,
      lazyImport: async () => route5,
      dataLoader: () => Promise.resolve(null),
      hasIndex: false,
      name: "route5",
      parentRoute: "/dashboard",
    },
  ],
  [
    "/dashboard",
    {
      render: () =>
        html`<root-module><dashboard-module></dashboard-module></root-module>`,
      lazyImport: async () => route7,
      dataLoader: () => Promise.resolve(null),
      hasIndex: true,
      name: "route7",
      parentRoute: "",
    },
  ],
  [
    "/custom/not/nested/route",
    {
      render: () =>
        html`<root-module><custom-route></custom-route></root-module>`,
      lazyImport: async () => route1,
      dataLoader: () => Promise.resolve(null),
      hasIndex: false,
      name: "route1",
    },
  ],
  [
    "/404",
    {
      render: () =>
        html`<root-module><unknown-route></unknown-route></root-module>`,
      lazyImport: async () => route0,
      dataLoader: () => Promise.resolve(null),
      hasIndex: false,
      name: "route0",
      parentRoute: "",
    },
  ],
  [
    "/",
    {
      render: () => html`<root-module><app-module></app-module></root-module>`,
      lazyImport: async () => route8,
      dataLoader: () => Promise.resolve(null),
      hasIndex: false,
      name: "route8",
      parentRoute: "",
    },
  ],
  [
    "",
    {
      render: () => html`<root-module></root-module>`,
      lazyImport: async () => route9,
      dataLoader: () => Promise.resolve(null),
      hasIndex: false,
      name: "route9",
    },
  ],
]);

export async function renderRoute(
  route: string
): Promise<TemplateResult | null> {
  const match = getRoute(route);
  if (match) {
    const args = getArgsForRoute(route);
    const attrs: { [key: string]: string } = {};
    if (args?.groups) {
      for (const [key, value] of Object.entries(args.groups)) {
        if (key && value) {
          attrs[key] = value;
        }
      }
    }
    const promises: { [key: string]: Promise<any> } = {};
    promises[route] = getRouteData(route, attrs);
    let parentRoute = match.parentRoute;
    while (parentRoute !== undefined) {
      const parentMatch = getRoute(parentRoute, false);
      if (parentMatch) {
        promises[parentRoute] = getRouteData(parentRoute, attrs);
      }
      parentRoute = parentMatch?.parentRoute;
    }
    const results = await Promise.all(Object.values(promises));
    const data = results.reduce((acc, result) => {
      if (result) {
        return { ...acc, ...result };
      }
      return acc;
    }, {});
    return match.render({ route, args: attrs, data });
  }
  return null;
}

async function getRouteData(route: string, attrs: { [key: string]: string }) {
  const match = getRoute(route);
  if (match) {
    const alias = await match.lazyImport();
    const data = await match.dataLoader(alias, route, attrs);
    return { [match.name]: data };
  }
  return {};
}

function getRoute(route: string, implicitIndex = true) {
  const match = routes.get(route);
  if (match) {
    if (match.hasIndex && implicitIndex) {
      const indexMatch = routes.get(`${route}/`);
      if (indexMatch) {
        return indexMatch;
      }
    }
    return match;
  }
  for (const [key, value] of routes.entries()) {
    const regMatch = route.match(fixRegex(key));
    if (regMatch !== null) {
      return value;
    }
  }
  return routes.get("/404");
}

function fixRegex(route: string): RegExp {
  const variableRegex = "[a-zA-Z0-9_-]+";
  const nameWithParameters = route.replace(
    new RegExp(`:(${variableRegex})`),
    (match) => {
      const groupName = match.slice(1);
      return `(?<${groupName}>[a-zA-Z0-9_\\-.,:;+*^%$@!]+)`;
    }
  );
  return new RegExp(`^${nameWithParameters}$`);
}

function getArgsForRoute(route: string): RegExpMatchArray | null {
  for (const key of Array.from(routes.keys())) {
    const regMatch = route.match(fixRegex(key));
    if (regMatch !== null) {
      return regMatch;
    }
  }
  return null;
}
