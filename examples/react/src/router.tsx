// This file is auto-generated by vscode-router-generator
// Do not edit this file directly

// Page Routes
// "/projects/:id": Root > ProjectBase > ProjectDetails
// "/projects/": Root > ProjectBase > ProjectList
// "/projects": Root > ProjectBase
// "/": Root > Home
// "": Root

import * as React from "react";

import { default as Route1, loader as Route1Loader } from './pages/projects/:id';
import { default as Route2, loader as Route2Loader } from './pages/projects/index';
import { default as Route3 } from './pages/projects';
import { default as Route0 } from './pages/index';
import { default as Route4 } from './pages/root';

async function App() : Promise<React.ReactElement> {
    const route = window.location.hash.slice(1);
    const routes: {
        [key: string]: (route:string, args: { [key: string]: any }) => Promise<React.ReactElement>;
       } = {
        '/projects/:id': async (route, args) => {
              const data = await Route1Loader(route, args);
              return <Route4><Route3><Route1 id={Object(args)["id"]} data={data}/></Route3></Route4>;
        },
        '/projects/': async (route, args) => {
              const data = await Route2Loader(route, args);
              return <Route4><Route3><Route2 data={data}/></Route3></Route4>;
        },
        '/projects': async (route, args) => {
              return <Route4><Route3/></Route4>;
        },
        '/': async (route, args) => {
              return <Route4><Route0/></Route4>;
        },
        '': async (route, args) => {
              return <Route4/>;
        },
    };
    // Match route with exact path
    const match = Object.entries(routes).find(([key]) => key === route);
    if (match) {
        const Component = await match[1](route, {});
        return Component;
    }
    // Match route with regex
    for (const [key, value] of Object.entries(routes)) {
        const routeMatch = route.match(fixRegex(key));
        if (routeMatch) {
            const args = Object(routeMatch)['groups'] || {};
            const Component = await value(route, args);
            return Component;
        }
    }
    const unknownRoute = Object.entries(routes).find(([key]) => key === '/404');
    if (unknownRoute) {
        const Component = await unknownRoute[1](route, {});
        return Component;
    }
    // If no match, return 404
    return <div>404</div>;
}

function fixRegex(route: string): RegExp {
    const variableRegex = "[a-zA-Z0-9_-]+";
    const nameWithParameters = route.replace(
        new RegExp(`:(${variableRegex})`),
        (match) => {
            const groupName = match.slice(1);
            return `(?<${groupName}>[a-zA-Z0-9_\\-.,:;+*^%$@!]+)`;
        }
    );
    return new RegExp(`^${nameWithParameters}$`);
}

export default App;
